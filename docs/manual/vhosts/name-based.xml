<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE manualpage SYSTEM "../style/manualpage.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision$ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<manualpage metafile="name-based.xml.meta">
<parentdocument href="./">Virtual Hosts</parentdocument>
<title>Name-based Virtual Host Support</title>

<summary>
    <p>This document describes when and how to use name-based virtual hosts.</p>
</summary>

<seealso><a href="ip-based.html">IP-based Virtual Host Support</a></seealso>
<seealso><a href="details.html">An In-Depth Discussion of Virtual Host Matching</a></seealso>
<seealso><a href="mass.html">Dynamically configured mass virtual hosting</a></seealso>
<seealso><a href="examples.html">Virtual Host examples for common setups</a></seealso>

<section id="namevip"><title>Name-based vs. IP-based Virtual Hosts</title>

    <p><a href="ip-based.html">IP-based virtual hosts</a> use the IP address of the connection to
    determine the correct virtual host to serve.  Therefore you need to
    have a separate IP address for each host.</p>

    <p>With name-based virtual hosting, the server relies on the client to 
    report the hostname as part of the HTTP headers.  Using this technique, 
    many different hosts can share the same IP address.</p>

    <p>Name-based virtual hosting is usually simpler, since you need
    only configure your DNS server to map each hostname to the correct
    IP address and then configure the Apache HTTP Server to recognize
    the different hostnames. Name-based virtual hosting also eases
    the demand for scarce IP addresses. Therefore you should use
    name-based virtual hosting unless there is a specific reason to
    choose IP-based virtual hosting. Some reasons why you might consider
    using IP-based virtual hosting:</p>

    <ul>
       <li>Name-based virtual hosting often <a href="../ssl/ssl_faq.html#vhosts">
        cannot be used with SSL secure servers</a>
        because of the nature of the SSL protocol.</li>

        <li>Some operating systems and network equipment implement bandwidth
        management techniques that cannot differentiate between hosts unless
        they are on separate IP addresses.</li>
    </ul>


</section>

<section id="alg"><title>How the server selects the proper name-based virtual host</title>

    <p>It is important to recognize that the first step in name-based virtual
    host resolution is IP-based resolution.  Name-based virtual host
    resolution only chooses the most appropriate name-based virtual host
    after narrowing down the candidates to the best IP-based match.  Using a wildcard (*)
    for the IP address in all of the NameVirtualHost and VirtualHost directives makes this
    IP-based mapping irrelevant.</p>
    
    <p>When a request arrives, the server will first check if it is using
    an IP address that matches exactly any <directive module="core"
    >NameVirtualHost</directive>. If it is, then it will look at each <directive
    type="section" module="core">VirtualHost</directive> section with a (literal) matching
    IP address and try to find one where the <directive module="core"
    >ServerName</directive> or <directive module="core" >ServerAlias</directive> 
    matches the requested hostname. If it finds one, then it uses the configuration 
    for that server.</p>

    <section id="defaultvhost"><title>The default name-based vhost for a NameVirtualHost</title>
    <p> If no matching ServerName or ServerAlias is found in the
    set of virtual hosts matching the NameVirtualHost directive, then 
    <strong>the first listed virtual host</strong> that matches the IP 
    address will be used.</p></section>
</section>

<section id="using"><title>Using Name-based Virtual Hosts</title>

<related>
    <modulelist>
    <module>core</module>
    </modulelist>

    <directivelist>
        <directive module="core">DocumentRoot</directive>
        <directive module="core">NameVirtualHost</directive>
        <directive module="core">ServerAlias</directive>
        <directive module="core">ServerName</directive>
        <directive module="core" type="section">VirtualHost</directive>
    </directivelist>
</related>

    <p>To use name-based virtual hosting, you must designate the IP
    address (and possibly port) on the server that will be accepting
    requests that need to be distinguished by hostname.
    This is configured using the <directive
    module="core">NameVirtualHost</directive> directive.
    In the normal case where any and all IP addresses on the server should
    be used, you can use <code>*</code> as the argument to <directive
    module="core">NameVirtualHost</directive>. If you're planning to use
    multiple ports (e.g. running SSL) you should add a Port to the argument,
    such as <code>*:80</code>.</p>

    <note><p>Note that mentioning an IP address in a
    <directive module="core">NameVirtualHost</directive> directive does not
    automatically make the server <em>listen</em> to that IP address. See
    <a href="../bind.html">Setting which addresses and ports Apache uses</a>
    for more details. In addition, any IP address specified here must be
    associated with a network interface on the server.</p></note>

    <p>The next step is to create a <directive type="section"
    module="core">VirtualHost</directive> block for
    each different host that you would like to serve. The argument to the
    <directive type="section" module="core">VirtualHost</directive> directive
    must match a defined <directive
    module="core">NameVirtualHost</directive> directive. (In this usual case,
    this will be "*:80").  Inside each <directive type="section"
    module="core">VirtualHost</directive> block, you will need at minimum a
    <directive module="core">ServerName</directive> directive to designate
    which host is served and a <directive module="core">DocumentRoot</directive>
    directive to show where in the filesystem the content for that host
    lives.</p>

    <note><title>Main host goes away</title>
        <p> Any request that doesn't match an existing <directive type="section"
        module="core">VirtualHost</directive> is handled by the global
        server configuration, regardless of the hostname or ServerName.</p>

        <p> When you add a name-based virtual host to an existing server, and 
        the virtual host arguments match preexisting IP and port combinations, 
        requests will now be handled by an explicit virtual host.  In this case,
        it's usually wise to create a <a href="#defaultvhost">default virtual host</a>
        with a <directive module="core">ServerName</directive> matching that of 
        the base server.  New domains on the same interface and port, but
        requiring separate configurations,  can then be added as subsequent (non-default)
        virtual hosts.</p>
    </note>

    <p>For example, suppose that you are serving the domain
    <code>www.example.com</code> and you wish to add the virtual host
    <code>other.example.com</code>, which points at the same IP address.
    Then you simply add the following to <code>httpd.conf</code>:</p>

    <example>
        NameVirtualHost *:80<br />
        <br />
        &lt;VirtualHost *:80&gt;<br />
        <indent>
            # This first-listed virtual host is also the default for *:80
            ServerName www.example.com<br />
            ServerAlias example.com *.example.com<br />
            DocumentRoot /www/domain<br />
        </indent>
        &lt;/VirtualHost&gt;<br />
        <br />
        &lt;VirtualHost *:80&gt;<br />
        <indent>ServerName other.example.com<br />
            DocumentRoot /www/otherdomain<br />
        </indent>
        &lt;/VirtualHost&gt;<br />
    </example>

    <p>You can alternatively specify an explicit IP address in place of the
    <code>*</code> in both the <directive module="core"
    >NameVirtualHost</directive> and <directive type="section" module="core"
    >VirtualHost</directive> directives. For example, you might want to do this
    in order to run some name-based virtual hosts on one IP address, and either
    IP-based, or another set of name-based virtual hosts on another address.</p>

    <p>Many servers want to be accessible by more than one name. This is
    possible with the <directive module="core">ServerAlias</directive>
    directive, placed inside the <directive type="section" module="core"
    >VirtualHost</directive> section. For example in the first <directive
    type="section" module="core">VirtualHost</directive> block above, the
    <directive module="core">ServerAlias</directive> directive indicates that
    the listed names are other names which people can use to see that same
    web site:</p>

    <example>
        ServerAlias example.com *.example.com
    </example>

    <p>then requests for all hosts in the <code>example.com</code> domain will
    be served by the <code>www.example.com</code> virtual host. The wildcard
    characters <code>*</code> and <code>?</code> can be used to match names.
    Of course, you can't just make up names and place them in <directive
    module="core">ServerName</directive> or <code>ServerAlias</code>. You must
    first have your DNS server properly configured to map those names to an IP
    address associated with your server.</p>

    <p>Finally, you can fine-tune the configuration of the virtual hosts
    by placing other directives inside the <directive type="section"
    module="core">VirtualHost</directive> containers. Most directives can be
    placed in these containers and will then change the configuration only of
    the relevant virtual host. To find out if a particular directive is allowed,
    check the <a href="../mod/directive-dict.html#Context">Context</a> of the
    directive. Configuration directives set in the <em>main server context</em>
    (outside any <directive type="section" module="core">VirtualHost</directive>
    container) will be used only if they are not overridden by the virtual host
    settings.</p>

</section>

</manualpage>
